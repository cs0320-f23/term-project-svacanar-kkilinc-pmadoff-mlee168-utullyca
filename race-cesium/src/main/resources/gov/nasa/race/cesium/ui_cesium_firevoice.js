/**
 * Based off of the ui_cesium_smoke.js class written by NASA engineers to
 * connect the SmokeServiceActor to the Cesium front-end.
 */

/**
 * Import statements ui_cesium_smoke.js
 */
import * as config from "./config.js"; // generated by scala
import * as ws from "./ws.js";
import * as util from "./ui_util.js";
import * as ui from "./ui.js";
import * as uiCesium from "./ui_cesium.js";

// constant of the fire voice layer for initial rendering
const defaultContourRender = initDefaultColors(config.fireVoiceLayer.countourRender);
// var to change the display
var currentContourRender = initDefaultColors(config.fireVoiceLayer.countourRender);

/**
 * Constants adapted from ui_cesium_smoke.js
 */
const FireVoiceLayerType = {PERIM : "perim", TEXT:"text"}
const LOADED = "○";
const SHOWING = "●"

/**
 * Adapted from ui_cesium_smoke.js
 * Each entry represents a satellite image
 * Creates a new entry for the fire voice layer (smoke layer in cesium_smoke)
 */
class Entry{
  static create (fireVoiceLayer){
    return new Entry(fireVoiceLayer);
  }

  // This needs to be changed with the FireVoiceLayer class objects
  /**
   static compareFiltered (a,b) { // used to make the entry list stay in order
   switch (util.compare(a.date,b.date)) {
   case -1: return 1;
   case 0: return util.compare(a.satellite, b.satellite); // this can't be used
   case 1: return -1;
   }
   */
  constructor(fireVoiceLayer) {
    this.id = fireVoiceLayer.uniqueId;
    this.perimEntry = FireVoiceEntry.create(fireVoiceLayer, fireVoiceLayerType.PERIM);
    this.textEntry = FireVoiceEntry.create(fireVoiceLayer, fireVoiceLayerType.TEXT);
  }
}